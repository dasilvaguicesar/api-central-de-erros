{
  "swagger": "2.0",
  "info": {
    "version": "1.0.3",
    "title": "API Error Center",
    "description": "Store and retrieve application logs from other applications",
    "license": {
      "name": "MIT",
      "url": "http://opensource.org/licenses/MIT"
    }
  },
  "host": "localhost:8080",
  "basePath": "/",
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "tags": [{
    "name": "User",
    "description": "routes"
  },{
    "name": "Logs",
    "description": "routes"
  }],
  "paths": {
    "/user/signup": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Create user",
        "description": "Create a new user account to get access to the API",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "User credentials",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "João da Silva"
                },
                "email": {
                  "type": "string",
                  "example": "joao@email.com.br"
                },
                "password": {
                  "type": "string",
                  "example": "123456"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns confirmation of the created user",
            "schema": {
              "$ref": "#/user_created_successfully"
            }
          },
          "406": {
            "description": "Returns the message stating that the data sent is invalid",
            "schema": {
              "$ref": "#/invalid_data"
            }
          },
          "409": {
            "description": "Returns the message stating that the email already exists",
            "schema": {
              "$ref": "#/create_409"
            }
          },
          "500": {
            "description": "Returns the message stating that an error has occurred on the server",
            "schema": {
              "$ref": "#/error_500"
            }
          }
        }
      }
    },
    "/user/signin": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "User login authenticate",
        "description": "Authenticate an existing user returning a token for API requests",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "User credentials",
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "format": "email",
                  "example": "joao@email.com.br"
                },
                "password": {
                  "type": "string",
                  "format": "password",
                  "example": "123456"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the token",
            "produces": [
              "application/json"
            ],
            "schema": {
              "type": "object",
              "properties": {
                "token": {
                  "type": "string",
                  "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOnsiaWQiOjJ9LCJpYXQiOjE1ODUxNjkwMjMsImV4cCI6MTU4NTI1NTQyM30.wgioiERBtXR6CXppvSyKV0MhFu28TKgfw94JvNEuDHA"
                }
              }
            }
          },
          "400": {
            "description": "Returns bad request",
            "produces": [
              "application/json"
            ],
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "User not found"
                }
              }
            }
          },
          "401": {
            "description": "Returns unauthorized",
            "schema": {
              "$ref": "#/incorrect_password"
            }
          },
          "500": {
            "description": "Returns the message stating that an error has occurred on the server",
            "schema": {
              "$ref": "#/error_500"
            }
          },
          "406": {
            "description": "Returns not acceptable",
            "produces": [
              "application/json"
            ],
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Data values are not valid"
                }
              }
            }
          }
        }
      }
    },
    "/user/restore": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "User login",
        "description": "Authenticate an existing user returning a token for API requests",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "User credentials",
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "format": "email",
                  "example": "joao@email.com.br"
                },
                "password": {
                  "type": "string",
                  "format": "password",
                  "example": "123456"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns OK",
            "produces": [
              "application/json"
            ],
            "schema": {
              "type": "object",
              "properties": {
                "token": {
                  "type": "string",
                  "example": "User restored successfully"
                }
              }
            }
          },
          "401": {
            "description": "Returns unauthorized",
            "schema": {
              "$ref": "#/incorrect_password"
            }
          },
          "500": {
            "description": "Returns the message stating that an error has occurred on the server",
            "schema": {
              "$ref": "#/error_500"
            }
          },
          "204": {
            "description": "Returns no content",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "{}"
                }
              }
            }
          },
          "406": {
            "description": "Returns not acceptable",
            "produces": [
              "application/json"
            ],
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Data values are not valid"
                }
              }
            }
          }
        }
      }
    },
    "/user": {
      "patch": {
        "tags": [
          "User"
        ],
        "summary": "Update user",
        "description": "Update an authenticated user with the new information provided in request body",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Provide the Authorization header using the Bearer scheme",
            "schema": {
              "type": "string",
              "required": true,
              "example": "Bearer wgioiERBtXR6CXppvSyKV0MhFu28TKgfw94JvNEuDHA"
            }
          },
          {
            "in": "body",
            "name": "User data to be updated",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "João da Silva Sauro"
                },
                "email": {
                  "type": "string",
                  "example": "joao_sauro@email.com.br"
                },
                "oldPassword": {
                  "type": "string",
                  "example": "123456"
                },
                "newPassword": {
                  "type": "string",
                  "example": "12345678"
                },
                "confirmPassword": {
                  "type": "string",
                  "example": "12345678"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Updated sucessfully!"
                }
              }
            }
          },
          "204": {
            "description": "Returns a message that did not find a user",
            "produces": [
              "application/json"
            ],
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "{}"
                }
              }
            }
          },
          "412": {
            "description": "Precondition failed",
            "produces": [
              "application/json"
            ],
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Password does not match"
                }
              }
            }
          },
          "406": {
            "description": "Returns Not Acceptable",
            "schema": {
              "$ref": "#/invalid_data"
            }
          },
          "500": {
            "description": "Returns the message stating that an error has occurred on the server",
            "schema": {
              "$ref": "#/error_500"
            }
          },
          "401": {
            "description": "Returns unauthorized",
            "produces": [
              "application/json"
            ],
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Invalid token"
                }
              }
            }
          },
          "403": {
            "description": "Returns forbidden",
            "produces": [
              "application/json"
            ],
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Token not provided"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "User"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Disable user",
        "description": "Executes a soft delete disabling the user account",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Provide the Authorization header using the Bearer scheme",
            "schema": {
              "type": "string",
              "required": true,
              "example": "Bearer wgioiERBtXR6CXppvSyKV0MhFu28TKgfw94JvNEuDHA"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the message stating that the user has been deleted",
            "schema": {
              "$ref": "#/delete_200"
            }
          },
          "500": {
            "description": "Returns the message stating that an error has occurred on the server",
            "schema": {
              "$ref": "#/error_500"
            }
          },
          "204": {
            "description": "Returns an empty object signaling that the user no longer exists",
            "schema": {
              "$ref": "#/status_204"
            }
          }
        }
      }
    },
    "/user/hard": {
      "delete": {
        "tags": [
          "User"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete user forever",
        "description": "Remove user account and all the logs associated with it from the database. This action cannot be undone. The user id will be provided by the token.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Provide the Authorization header using the Bearer scheme",
            "schema": {
              "type": "string",
              "required": true,
              "example": "Bearer wgioiERBtXR6CXppvSyKV0MhFu28TKgfw94JvNEuDHA"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the body with a message of deletation",
            "produces": [
              "application/json"
            ],
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Deleted successfully, this action cannot be undone"
                }
              }
            }
          },
          "500": {
            "description": "Returns the message stating that an error has occurred on the server",
            "schema": {
              "$ref": "#/error_500"
            }
          },
          "204": {
            "description": "Returns an empty object signaling that the user no longer exists",
            "schema": {
              "$ref": "#/status_204"
            }
          }
        }
      }
    },
    "/logs/sender/{senderApplication}": {
      "get": {
        "tags": [
          "Logs"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get logs by application",
        "description": "Get all the logs for the application passed in the url parameter",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Provide the Authorization header using the Bearer scheme",
            "schema": {
              "type": "string",
              "required": true,
              "example": "Bearer wgioiERBtXR6CXppvSyKV0MhFu28TKgfw94JvNEuDHA"
            }
          },
          {
            "in": "path",
            "name": "senderApplication",
            "schema": {
              "type": "string",
              "required": true,
              "example": "Application name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all logs by application",
            "schema": {
              "type": "object",
              "properties": {
                "total": {
                  "type": "number",
                  "example": 1
                },
                "Logs": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Log"
                  }
                }
              }
            }
          },
          "204": {
            "description": "There are no records for the reported application",
            "schema": {
              "$ref": "#/status_204"
            }
          },
          "500": {
            "description": "Returns the message stating that an error has occurred on the server",
            "schema": {
              "$ref": "#/error_500"
            }
          }
        }
      }
    },
    "/logs/environment/{environment}": {
      "get": {
        "tags": [
          "Logs"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get logs by environment",
        "description": "Get all logs of an environment that is passed in the url parameter",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Provide the Authorization header using the Bearer scheme",
            "schema": {
              "type": "string",
              "required": true,
              "example": "Bearer wgioiERBtXR6CXppvSyKV0MhFu28TKgfw94JvNEuDHA"
            }
          },
          {
            "in": "path",
            "name": "environment",
            "schema": {
              "type": "string",
              "required": true,
              "example": "homologation"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Returns all logs by environment",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Log"
              }
            }
          },
          "500": {
            "description": "Returns the message stating that an error has occurred on the server",
            "schema": {
              "$ref": "#/error_500"
            }
          },
          "204": {
            "description": "Returns an empty object, signaling that there are no logs to display for this use",
            "schema": {
              "$ref": "#/status_204"
            }
          }
        }
      }
    },
    "/logs/level/{level}": {
      "get": {
        "tags": [
          "Logs"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get logs by level",
        "description": "Get all the logs with the same level passed in the url parameter",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Provide the Authorization header using the Bearer scheme",
            "schema": {
              "type": "string",
              "required": true,
              "example": "Bearer wgioiERBtXR6CXppvSyKV0MhFu28TKgfw94JvNEuDHA"
            }
          },
          {
            "in": "path",
            "name": "level",
            "schema": {
              "type": "string",
              "required": true,
              "example": "WARN"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all logs by level",
            "schema": {
              "$ref": "#/getByLevel_200"
            }
          },
          "500": {
            "description": "Returns the message stating that an error has occurred on the server",
            "schema": {
              "$ref": "#/error_500"
            }
          },
          "204": {
            "description": "Returns the message stating that there are no logs",
            "schema": {
              "$ref": "#/status_204"
            }
          }
        }
      }
    },
    "/logs": {
      "get": {
        "tags": [
          "Logs"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get all logs by user",
        "description": "Bring all logs registered by the user",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Provide the Authorization header using the Bearer scheme",
            "schema": {
              "type": "string",
              "required": true,
              "example": "Bearer wgioiERBtXR6CXppvSyKV0MhFu28TKgfw94JvNEuDHA"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the logs ",
            "schema": {
              "type": "object",
              "properties": {
                "total": {
                  "type": "number",
                  "example": 1
                },
                "Logs": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Log"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Returns unauthorized",
            "schema": {
              "$ref": "#/invalid_token"
            }
          },
          "500": {
            "description": "Returns the message stating that an error has occurred on the server",
            "schema": {
              "$ref": "#/error_500"
            }
          },
          "204": {
            "description": "Returns an empty object, signaling that there are no logs to display",
            "schema": {
              "type": "object",
              "properties": {
                "type": "string",
                "example": "{}"
              }
            }
          },
          "403": {
            "description": "Returns forbidden",
            "schema": {
              "$ref": "#/token_not_provided"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Logs"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create logs",
        "description": "Creates a new log associated with a user. The user id is provided by the token.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Provide the Authorization header using the Bearer scheme",
            "schema": {
              "type": "string",
              "required": true,
              "example": "Bearer wgioiERBtXR6CXppvSyKV0MhFu28TKgfw94JvNEuDHA"
            }
          },
          {
            "in": "body",
            "name": "Logs body",
            "schema": {
              "type": "object",
              "properties": {
                "level": {
                  "type": "string",
                  "example": "WARN"
                },
                "description": {
                  "type": "string",
                  "example": "Application restarted"
                },
                "senderApplication": {
                  "type": "string",
                  "example": "Server load monitor"
                },
                "sendDate": {
                  "type": "string",
                  "example": "11/26/2019 15:00"
                },
                "environment": {
                  "type": "string",
                  "example": "homologation"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the created log",
            "produces": [
              "application/json"
            ],
            "schema": {
              "type": "object",
              "properties": {
                "createdLog": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "example": 1
                    },
                    "level": {
                      "type": "string",
                      "example": "WARN"
                    },
                    "description": {
                      "type": "string",
                      "example": "Application restarted"
                    },
                    "senderApplication": {
                      "type": "string",
                      "example": "Server load monitor"
                    },
                    "sendDate": {
                      "type": "string",
                      "example": "11/26/2019 15:00"
                    },
                    "environment": {
                      "type": "string",
                      "example": "homologation"
                    },
                    "UserId": {
                      "type": "number",
                      "example": 1
                    },
                    "updatedAt": {
                      "type": "date-time",
                      "example": "2020-03-26T00:21:40.039Z"
                    },
                    "createdAt": {
                      "type": "date-time",
                      "example": "2020-03-26T00:21:40.039Z"
                    }
                  }
                }
              }
            }
          },
          "406": {
            "description": "Returns not acceptable",
            "schema": {
              "$ref": "#/invalid_data"
            }
          },
          "500": {
            "description": "Returns the message stating that an error has occurred on the server",
            "schema": {
              "$ref": "#/error_500"
            }
          }
        }
      }
    },
    "/logs/restore/id/{id}": {
      "post": {
        "tags": [
          "Logs"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Restore a log",
        "description": "Restore a log by an informed ID",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Provide the Authorization header using the Bearer scheme",
            "schema": {
              "type": "string",
              "required": true,
              "example": "Bearer wgioiERBtXR6CXppvSyKV0MhFu28TKgfw94JvNEuDHA"
            }
          },
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "required": true,
              "example": "1"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the confirmation of the restored log",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Log restored successfully"
                }
              }
            }
          },
          "204": {
            "description": "Returns an empty object, signaling that there are no logs to display",
            "schema": {
              "$ref": "#/status_204"
            }
          },
          "500": {
            "description": "Returns the message stating that an error has occurred on the server",
            "schema": {
              "$ref": "#/error_500"
            }
          }
        }
      }
    },
    "/logs/restore/all": {
      "post": {
        "tags": [
          "Logs"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Restore all logs",
        "description": "Restore all logs created by the user",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Provide the Authorization header using the Bearer scheme",
            "schema": {
              "type": "string",
              "required": true,
              "example": "Bearer wgioiERBtXR6CXppvSyKV0MhFu28TKgfw94JvNEuDHA"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a succesfull message when all logs of an user are restored",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "All logs restored successfully"
                }
              }
            }
          },
          "500": {
            "description": "Returns the message stating that an error has occurred on the server",
            "schema": {
              "$ref": "#/error_500"
            }
          },
          "204": {
            "description": "Returns an empty object, signaling that there are no logs to display",
            "schema": {
              "$ref": "#/status_204"
            }
          }
        }
      }
    },
    "/logs/id/{id}": {
      "delete": {
        "tags": [
          "Logs"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Soft delete log",
        "description": "Delete the log with the id passed in the url",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Provide the Authorization header using the Bearer scheme",
            "schema": {
              "type": "string",
              "required": true,
              "example": "Bearer wgioiERBtXR6CXppvSyKV0MhFu28TKgfw94JvNEuDHA"
            }
          },
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "required": true,
              "example": "1"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the message stating that the log has been deleted",
            "schema": {
              "$ref": "#/deleteById_200"
            }
          },
          "500": {
            "description": "Returns the message stating that an error has occurred on the server",
            "schema": {
              "$ref": "#/error_500"
            }
          },
          "204": {
            "description": "Returns an empty object, signaling that there are no logs to delete",
            "schema": {
              "$ref": "#/status_204"
            }
          }
        }
      }
    },
    "/logs/all": {
      "delete": {
        "tags": [
          "Logs"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Soft Delete for all logs from user",
        "description": "Delete al the logs from a user. The user id will be provided by the token.",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Provide the Authorization header using the Bearer scheme",
            "schema": {
              "type": "string",
              "required": true,
              "example": "Bearer wgioiERBtXR6CXppvSyKV0MhFu28TKgfw94JvNEuDHA"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the body with a message of deletation",
            "produces": [
              "application/json"
            ],
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Deleted successfully"
                }
              }
            }
          },
          "401": {
            "description": "Returns unauthorized",
            "produces": [
              "application/json"
            ],
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Invalid token"
                }
              }
            }
          },
          "500": {
            "description": "Returns the message stating that an error has occurred on the server",
            "schema": {
              "$ref": "#/error_500"
            }
          },
          "204": {
            "description": "Returns an empty object, signaling that there are no logs to delete",
            "schema": {
              "$ref": "#/status_204"
            }
          },
          "403": {
            "description": "Returns forbidden",
            "produces": [
              "application/json"
            ],
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Token not provided"
                }
              }
            }
          }
        }
      }
    },
    "/logs/hard/{id}": {
      "delete": {
        "tags": [
          "Logs"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Permanently deletes the user log",
        "description": "Delete the log. The log id will be provided by the token.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Provide the Authorization header using the Bearer scheme",
            "schema": {
              "type": "string",
              "required": true,
              "example": "Bearer wgioiERBtXR6CXppvSyKV0MhFu28TKgfw94JvNEuDHA"
            }
          },
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "required": true,
              "example": "1"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Remove the log with the matching ID if it existed previously. Otherwise do nothing.",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Deleted successfully, this action cannot be undone"
                }
              }
            }
          },
          "204": {
            "description": "Returns an empty object, signaling that there are no logs to delete",
            "schema": {
              "$ref": "#/status_204"
            }
          },
          "500": {
            "description": "Returns the message stating that an error has occurred on the server",
            "schema": {
              "$ref": "#/error_500"
            }
          }
        }
      }
    },
    "/logs/all/hard": {
      "delete": {
        "tags": [
          "Logs"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Permanently deletes all user logs",
        "description": "Delete al the logs from a user forever. This action cannot be undone. The user id will be provided by the token.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Provide the Authorization header using the Bearer scheme",
            "schema": {
              "type": "string",
              "required": true,
              "example": "Bearer wgioiERBtXR6CXppvSyKV0MhFu28TKgfw94JvNEuDHA"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the body with a message of deletation",
            "produces": [
              "application/json"
            ],
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Deleted successfully, this action cannot be undone"
                }
              }
            }
          },
          "401": {
            "description": "Returns unauthorized",
            "produces": [
              "application/json"
            ],
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Invalid token"
                }
              }
            }
          },
          "500": {
            "description": "Returns the message stating that an error has occurred on the server",
            "schema": {
              "$ref": "#/error_500"
            }
          },
          "204": {
            "description": "Returns an empty object, signaling that there are no logs to delete",
            "schema": {
              "$ref": "#/status_204"
            }
          },
          "403": {
            "description": "Returns forbidden",
            "produces": [
              "application/json"
            ],
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Token not provided"
                }
              }
            }
          }
        }
      }
    }
  },
  "token_not_provided": {
    "type": "object",
    "properties": {
      "message": {
        "type": "string",
        "example": "Token not provided"
      }
    }
  },
  "user_created_successfully": {
    "type": "object",
    "properties": {
      "message": {
        "type": "string",
        "example": "User created successfully"
      }
    }
  },
  "invalid_token": {
    "type": "object",
    "properties": {
      "message": {
        "type": "string",
        "example": "Invalid token"
      }
    }
  },
  "incorrect_password": {
    "type": "object",
    "properties": {
      "message": {
        "type": "string",
        "example": "Incorrect password"
      }
    }
  },
  "invalid_data": {
    "type": "object",
    "properties": {
      "message": {
        "type": "string",
        "example": "Invalid data"
      }
    }
  },
  "create_409": {
    "type": "object",
    "properties": {
      "message": {
        "type": "string",
        "example": "User email already exists"
      }
    }
  },
  "status_204": {
    "type": "object",
    "properties": {
      "message": {
        "type": "string",
        "example": "{}"
      }
    }
  },
  "delete_200": {
    "type": "object",
    "properties": {
      "message": {
        "type": "string",
        "example": "Deleted successfully"
      }
    }
  },
  "getByLevel_200": {
    "type": "object",
    "properties": {
      "id": {
        "type": "number",
        "example": 1
      },
      "level": {
        "type": "string",
        "example": "WARN"
      },
      "description": {
        "type": "string",
        "example": "Application restarted"
      },
      "senderApplication": {
        "type": "string",
        "example": "Server load monitor"
      },
      "sendDate": {
        "type": "string",
        "example": "11/26/2019 15:00"
      },
      "environment": {
        "type": "string",
        "example": "homologation"
      },
      "UserId": {
        "type": "number",
        "example": 1
      },
      "updatedAt": {
        "type": "date-time",
        "example": "2020-03-26T00:21:40.039Z"
      },
      "createdAt": {
        "type": "date-time",
        "example": "2020-03-26T00:21:40.039Z"
      }
    }
  },
  "getByLevel_200_": {
    "type": "object",
    "properties": {
      "message": {
        "type": "string",
        "example": "There are no logs"
      }
    }
  },
  "deleteById_200": {
    "type": "object",
    "properties": {
      "message": {
        "type": "string",
        "example": "Deleted successfully"
      }
    }
  },
  "deleteById_200_": {
    "type": "object",
    "properties": {
      "message": {
        "type": "string",
        "example": "There is no logs"
      }
    }
  },
  "error_500": {
    "type": "object",
    "properties": {
      "message": {
        "type": "string",
        "example": "Internal Server Error"
      }
    }
  },
  "definitions": {
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "example": 123
        },
        "name": {
          "type": "string",
          "example": "João da Silva"
        },
        "email": {
          "type": "string",
          "example": "joao@email.com.br"
        },
        "password": {
          "type": "string",
          "format": "password",
          "example": "652a80db6fab5930dabf7d4fb7db5d67"
        }
      },
      "required": [
        "name",
        "email",
        "password"
      ]
    },
    "Log": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "example": 321
        },
        "level": {
          "type": "string",
          "enum": [
            "FATAL",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "TRACE",
            "ALL",
            "OFF"
          ],
          "example": "WARN"
        },
        "description": {
          "type": "string",
          "example": "Application restarted"
        },
        "senderApplication": {
          "type": "string",
          "example": "Server load monitor"
        },
        "sendDate": {
          "type": "string"
        },
        "environment": {
          "type": "string",
          "enum": [
            "production",
            "homologation"
          ],
          "example": "homologation"
        },
        "userId": {
          "type": "integer",
          "example": 123
        }
      },
      "required": [
        "level",
        "description",
        "senderApplication",
        "sendDate",
        "environment",
        "userId"
      ]
    }
  }
}